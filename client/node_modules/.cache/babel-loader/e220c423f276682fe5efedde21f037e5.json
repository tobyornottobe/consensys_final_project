{"ast":null,"code":"import _regeneratorRuntime from \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport UBIContract from \"./contracts/UBI.json\";\nimport getWeb3 from \"./utils/getWeb3\"; //import Web3 from \"web3\";\n\nimport { MetaMaskButton } from 'rimble-ui';\nimport { Button } from 'rimble-ui';\nimport { QR } from 'rimble-ui';\nimport smartphone from \"./img/smartphone.svg\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      foundationCapital: 14,\n      web3: null,\n      accounts: [],\n      beneficiaries: 1,\n      contract: null,\n      interest: 0,\n      claimed: false,\n      claimTime: \"\",\n      claimCount: 0,\n      claimAmount: 14.99,\n      isButtonDisabled: false,\n      loading: true\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, balance, num, accounts, networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n\n              _this.setState({\n                web3: web3\n              }); //Get balance of foundation account\n\n\n              _context.next = 7;\n              return web3.eth.getBalance(\"0x790a9b856034592fde5e73c4d8431e8ff07c38eb\");\n\n            case 7:\n              balance = _context.sent;\n              //Will give value of the foundation capital in.\n              num = web3.utils.fromWei(balance, \"ether\");\n\n              _this.setState({\n                foundationCapital: num\n              }); // Use web3 to get the user's accounts (e.g. Metamask account).\n\n\n              _context.next = 12;\n              return web3.eth.getAccounts();\n\n            case 12:\n              accounts = _context.sent;\n\n              _this.setState({\n                accounts: accounts\n              }); //Calculate interest and share for each beneficiary\n\n\n              _this.setState(function (_ref2) {\n                var interest = _ref2.interest;\n                return {\n                  interest: _this.state.foundationCapital * 0.1499\n                };\n              });\n\n              if (_this.state.beneficiaries > 0) {\n                _this.setState(function (_ref3) {\n                  var interest = _ref3.interest;\n                  return {\n                    claimAmount: _this.state.interest / _this.state.beneficiaries\n                  };\n                });\n              } // Get the contract instance.\n\n\n              _context.next = 18;\n              return web3.eth.net.getId();\n\n            case 18:\n              networkId = _context.sent;\n              deployedNetwork = UBIContract.networks[networkId];\n              instance = new web3.eth.Contract(UBIContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this.runExample);\n\n              _context.next = 28;\n              break;\n\n            case 24:\n              _context.prev = 24;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context.t0);\n\n            case 28:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 24]]);\n    }));\n    _this.connectMM =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return window.ethereum.enable();\n\n            case 2:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.increaseClaimCount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var _this$state, accounts, contract, claimAmount, admin, date, timestamp;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              //Trigger beneficiary withdrawal\n              _this$state = _this.state, accounts = _this$state.accounts, contract = _this$state.contract, claimAmount = _this$state.claimAmount; //const response = await contract.methods.withdraw(2, {to: accounts[0]})\n              //  const beneficiary = await contract.methods.addBeneficiary(accounts[0]).then(console.log);\n\n              _context3.next = 3;\n              return contract.methods.beneficiaries.call(_this.state.accounts[0]).then(console.log);\n\n            case 3:\n              admin = _context3.sent;\n\n              //contract.claimWaitSeconds.call().then(console.log);\n              //  const withdraw = await contract.methods.withdraw().send({from: \"0x790a9b856034592fde5e73c4d8431e8ff07c38eb\", to: accounts[0]})\n              //Increase the beneficiary count and disable button for 24hours\n              _this.setState(function (_ref6) {\n                var claimCount = _ref6.claimCount;\n                return {\n                  claimCount: claimCount + 1\n                };\n              });\n\n              _this.setState(function (_ref7) {\n                var claimed = _ref7.claimed;\n                return {\n                  claimed: true\n                };\n              });\n\n              _this.setState(function (_ref8) {\n                var isButtonDisabled = _ref8.isButtonDisabled;\n                return {\n                  isButtonDisabled: true\n                };\n              }); //Display time of last claim\n\n\n              date = new Date();\n              timestamp = date.toTimeString();\n\n              _this.setState(function (_ref9) {\n                var claimTime = _ref9.claimTime;\n                return {\n                  claimTime: timestamp\n                };\n              });\n\n              _this.state.beneficiaries += 1; //disable button for 24hours\n\n              /*  window.setTimeout(function () {\n                     this.setState({\n                         isButtonDisabled: false,\n                     })\n                 },5000)*/\n\n            case 11:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var _this$state2, accounts, contract;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this$state2 = _this.state, accounts = _this$state2.accounts, contract = _this$state2.contract; // Stores and deposits to the foundation capital\n              // await contract.methods.set(2).send({ from: accounts[0] });\n              // await contract.methods.deposit().send({ from: accounts[0] });\n              //  var receiverAccount = '0xddd5fc674275e8106b490b79da5e79e5565601fe';\n              //  await contract.methods.deposit().send({ from: accounts[0] });\n              // Get the value from the contract to prove it worked.\n              // const response = await contract.methods.get().call();\n              //  const response = await contract.methods.withdraw().send({ from: accounts[1] });\n              // Update state with the result.\n              //  this.setState({ claimAmount: response});\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      console.log('this is:', this);\n    }\n  }, {\n    key: \"renderConnectionBox\",\n    value: function renderConnectionBox() {\n      return React.createElement(\"div\", {\n        id: \"step1\",\n        className: \"floatright bluebox\",\n        hidden: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, \"Connect with MetaMask to claim your Universal Block Income\"), React.createElement(MetaMaskButton, {\n        onClick: this.connectMM,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Connect with MetaMask\"));\n    }\n  }, {\n    key: \"renderClaimBox\",\n    value: function renderClaimBox() {\n      console.log(this.state.claimed);\n      console.log(this.state.claimAmount);\n      console.log(this.state.claimTime);\n      return React.createElement(\"div\", {\n        id: \"step2\",\n        className: \"floatright bluebox\",\n        hidden: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"Your share\"), React.createElement(\"img\", {\n        className: \"phone\",\n        src: smartphone,\n        alt: \"phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }, \"Today's interest of \", this.state.interest, \" ETH, divided by \", this.state.beneficiaries, \" beneficiaries:  \"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \"With this account \", React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, this.state.accounts), \" you can claim approx. \", React.createElement(\"span\", {\n        className: \"bold\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, \" \", this.state.claimAmount, \" ETH\"), \", today.\"), React.createElement(Button, {\n        onClick: this.increaseClaimCount,\n        disabled: this.state.isButtonDisabled,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Claim it\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, this.state.claimed ? \"Claimed on \" : \" \", this.state.claimTime));\n    }\n  }, {\n    key: \"renderDonateBox\",\n    value: function renderDonateBox() {\n      return React.createElement(\"div\", {\n        id: \"step3\",\n        className: \"floatright bluebox\",\n        hidden: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, \"Donate to this address\"), React.createElement(QR, {\n        value: \"0xAc03BB73b6a9e108530AFf4Df5077c2B3D481e5A\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 185\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if (!this.state.web3) {\n      //   return <div>Loading Web3, accounts, and contract...</div>;\n      // }\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }, \"#UniversalBlockIncome\"), React.createElement(\"div\", {\n        className: \"floatleft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"tcenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Current foundation assets: \", React.createElement(\"span\", {\n        className: \"cyan capital\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, this.state.foundationCapital, \" ETH\")), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, \"You need money? Claim it. Every 24h.\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"You want to help? Donate. Temporary or permanently.\")), window.ethereum.selectedAddress ? this.renderClaimBox() : this.renderConnectionBox())) //end App\n      ;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/toby/Dropbox/SitesundIdeas/Techdegree-fsjs/techdegree-fsjs-project-1/consensys_final_project/client/src/App.js"],"names":["React","Component","UBIContract","getWeb3","MetaMaskButton","Button","QR","App","state","foundationCapital","web3","accounts","beneficiaries","contract","interest","claimed","claimTime","claimCount","claimAmount","isButtonDisabled","loading","componentDidMount","setState","eth","getBalance","balance","num","utils","fromWei","getAccounts","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","runExample","alert","console","error","connectMM","window","ethereum","enable","increaseClaimCount","methods","call","then","log","admin","date","Date","timestamp","toTimeString","smartphone","selectedAddress","renderClaimBox","renderConnectionBox"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport UBIContract from \"./contracts/UBI.json\";\nimport getWeb3 from \"./utils/getWeb3\";\n//import Web3 from \"web3\";\n\nimport { MetaMaskButton } from 'rimble-ui';\nimport { Button } from 'rimble-ui';\nimport { QR } from 'rimble-ui';\n\n\n\nimport smartphone from './img/smartphone.svg';\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n      foundationCapital: 14,\n      web3: null,\n      accounts: [],\n      beneficiaries: 1,\n      contract: null,\n      interest: 0,\n      claimed: false,\n      claimTime: \"\",\n      claimCount: 0,\n      claimAmount: 14.99,\n      isButtonDisabled: false,\n      loading: true\n\n    };\n\n    handleClick() {\n       console.log('this is:', this);\n     }\n\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n      this.setState({ web3: web3});\n\n      //Get balance of foundation account\n      var balance = await web3.eth.getBalance(\"0x790a9b856034592fde5e73c4d8431e8ff07c38eb\"); //Will give value of the foundation capital in.\n      var num = web3.utils.fromWei(balance, \"ether\")\n      this.setState({ foundationCapital: num});\n\n      // Use web3 to get the user's accounts (e.g. Metamask account).\n      const accounts = await web3.eth.getAccounts();\n      this.setState({ accounts: accounts});\n\n      //Calculate interest and share for each beneficiary\n      this.setState(({ interest }) => ({ interest : this.state.foundationCapital * 0.1499}));\n      if(this.state.beneficiaries > 0){\n          this.setState(({ interest }) => ({ claimAmount : this.state.interest / this.state.beneficiaries}));\n      }\n\n\n\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = UBIContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        UBIContract.abi,\n        deployedNetwork && deployedNetwork.address,\n\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n\n\n\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n\n  connectMM = async () =>\n    {\n      await window.ethereum.enable();//await needs async\n\n    }\n\n   increaseClaimCount = async () =>\n{\n\n  //Trigger beneficiary withdrawal\n  const { accounts, contract, claimAmount } = this.state;\n\n  //const response = await contract.methods.withdraw(2, {to: accounts[0]})\n\n//  const beneficiary = await contract.methods.addBeneficiary(accounts[0]).then(console.log);\n  const admin = await contract.methods.beneficiaries.call(this.state.accounts[0]).then(console.log);\n  //contract.claimWaitSeconds.call().then(console.log);\n//  const withdraw = await contract.methods.withdraw().send({from: \"0x790a9b856034592fde5e73c4d8431e8ff07c38eb\", to: accounts[0]})\n\n\n\n\n\n  //Increase the beneficiary count and disable button for 24hours\n  this.setState(({ claimCount }) => ({ claimCount : claimCount + 1}))\n  this.setState(({ claimed }) => ({ claimed : true}))\n  this.setState(({ isButtonDisabled }) => ({ isButtonDisabled: true}))\n\n  //Display time of last claim\n  let date = new Date();\n  let timestamp = date.toTimeString();\n  this.setState(({ claimTime }) => ({ claimTime : timestamp}))\n  this.state.beneficiaries += 1;\n\n\n  //disable button for 24hours\n/*  window.setTimeout(function () {\n       this.setState({\n           isButtonDisabled: false,\n       })\n   },5000)*/\n\n}\n\n\nrunExample = async () => {\n  const { accounts, contract } = this.state;\n\n  // Stores and deposits to the foundation capital\n  // await contract.methods.set(2).send({ from: accounts[0] });\n  // await contract.methods.deposit().send({ from: accounts[0] });\n  //  var receiverAccount = '0xddd5fc674275e8106b490b79da5e79e5565601fe';\n  //  await contract.methods.deposit().send({ from: accounts[0] });\n\n\n  // Get the value from the contract to prove it worked.\n  // const response = await contract.methods.get().call();\n//  const response = await contract.methods.withdraw().send({ from: accounts[1] });\n  // Update state with the result.\n//  this.setState({ claimAmount: response});\n\n\n};\n\n\n  renderConnectionBox(){\n         return(\n           <div id=\"step1\" className=\"floatright bluebox\" hidden={false}>\n           <h2>Connect with MetaMask to claim your Universal Block Income</h2>\n           <MetaMaskButton onClick={this.connectMM} >Connect with MetaMask</MetaMaskButton>\n           </div>\n         )\n       }\n\n  renderClaimBox() {\n      console.log(this.state.claimed)\n      console.log(this.state.claimAmount)\n      console.log(this.state.claimTime)\n       return (\n           <div id=\"step2\" className=\"floatright bluebox\" hidden={false}>\n           <h2>Your share</h2><img className=\"phone\" src={smartphone} alt=\"phone\"></img>\n           <p>Today's interest of {this.state.interest} ETH, divided by {this.state.beneficiaries} beneficiaries:  </p>\n           <p>With this account <small>{this.state.accounts}</small> you can claim approx. <span className=\"bold\"> {this.state.claimAmount} ETH</span>, today.</p>\n           <Button onClick={this.increaseClaimCount} disabled={this.state.isButtonDisabled}>Claim it</Button>\n           <p>{this.state.claimed ? \"Claimed on \" : \" \"}{this.state.claimTime}</p>\n           </div>\n         );\n       }\n\n  renderDonateBox(){\n        return(\n          <div id=\"step3\" className=\"floatright bluebox\" hidden={false}>\n          <h2>Donate to this address</h2>\n          <QR value=\"0xAc03BB73b6a9e108530AFf4Df5077c2B3D481e5A\" />\n          </div>\n              )\n            }\n\n\n\n\n\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n\n\n\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n\n            <h1>#UniversalBlockIncome</h1>\n\n            <div className=\"floatleft\">\n              <h2 className=\"tcenter\">Current foundation assets: <span className=\"cyan capital\">{this.state.foundationCapital} ETH</span></h2>\n              <h3>You need money? Claim it. Every 24h.</h3>\n              <h3>You want to help? Donate. Temporary or permanently.</h3>\n\n            </div>\n\n\n            {window.ethereum.selectedAddress\n            ? this.renderClaimBox()\n            : this.renderConnectionBox()\n            }\n\n\n        </div>\n      </div>\n      //end App\n\n\n\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}