{"ast":null,"code":"import _regeneratorRuntime from \"/Users/toby/Desktop/H_FinalProject/client/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/toby/Desktop/H_FinalProject/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/toby/Desktop/H_FinalProject/client/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/toby/Desktop/H_FinalProject/client/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/toby/Desktop/H_FinalProject/client/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/toby/Desktop/H_FinalProject/client/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/toby/Desktop/H_FinalProject/client/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/toby/Desktop/H_FinalProject/client/src/App.js\";\nimport React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport Web3 from \"web3\";\nimport { MetaMaskButton } from 'rimble-ui';\nimport { Button } from 'rimble-ui';\nimport smartphone from \"./img/smartphone.svg\";\nimport \"./App.css\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      storageValue: 14,\n      balance: 4,\n      web3: null,\n      accounts: null,\n      beneficiaries: 2483,\n      contract: null,\n      interest: 0,\n      claimed: false,\n      claimTime: \"\",\n      claimCount: 0,\n      claimAmount: 0,\n      loading: true\n    };\n    _this.componentDidMount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var web3, balance, num, accounts, networkId, deployedNetwork, instance;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return getWeb3();\n\n            case 3:\n              web3 = _context.sent;\n              _context.next = 6;\n              return web3.eth.getBalance(\"0xde168992b691107b6ef8d0cdc91a55b4017e9c06\");\n\n            case 6:\n              balance = _context.sent;\n              //Will give value in.\n              num = web3.utils.fromWei(balance, \"ether\");\n\n              _this.setState({\n                storageValue: num\n              });\n\n              _this.setState(function (_ref2) {\n                var interest = _ref2.interest;\n                return {\n                  interest: _this.state.storageValue * 0.1499\n                };\n              });\n\n              _this.setState(function (_ref3) {\n                var interest = _ref3.interest;\n                return {\n                  claimAmount: _this.state.interest / _this.state.beneficiaries\n                };\n              }); // Use web3 to get the user's accounts (e.g. Metamask account).\n\n\n              _context.next = 13;\n              return web3.eth.getAccounts();\n\n            case 13:\n              accounts = _context.sent;\n              _context.next = 16;\n              return web3.eth.net.getId();\n\n            case 16:\n              networkId = _context.sent;\n              deployedNetwork = SimpleStorageContract.networks[networkId];\n              instance = new web3.eth.Contract(SimpleStorageContract.abi, deployedNetwork && deployedNetwork.address); // Set web3, accounts, and contract to the state, and then proceed with an\n              // example of interacting with the contract's methods.\n\n              _this.setState({\n                web3: web3,\n                accounts: accounts,\n                contract: instance\n              }, _this.runExample);\n\n              _context.next = 26;\n              break;\n\n            case 22:\n              _context.prev = 22;\n              _context.t0 = _context[\"catch\"](0);\n              // Catch any errors for any of the above operations.\n              alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n              console.error(_context.t0);\n\n            case 26:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this, [[0, 22]]);\n    }));\n    _this.connectMM =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              window.ethereum.enable(); //await needs async\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n    _this.increaseClaimCount =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3() {\n      var date, timestamp;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _this.setState(function (_ref6) {\n                var claimCount = _ref6.claimCount;\n                return {\n                  claimCount: claimCount + 1\n                };\n              });\n\n              _this.setState(function (_ref7) {\n                var claimed = _ref7.claimed;\n                return {\n                  claimed: true\n                };\n              });\n\n              date = new Date();\n              timestamp = date.getTime();\n\n              _this.setState(function (_ref8) {\n                var claimTime = _ref8.claimTime;\n                return {\n                  claimTime: timestamp\n                };\n              });\n\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n    _this.runExample =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee4() {\n      var _this$state, accounts, contract, response;\n\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _this$state = _this.state, accounts = _this$state.accounts, contract = _this$state.contract; // Stores a given value, 5 by default.\n\n              _context4.next = 3;\n              return contract.methods.set(2).send({\n                from: accounts[0]\n              });\n\n            case 3:\n              _context4.next = 5;\n              return contract.methods.get().call();\n\n            case 5:\n              response = _context4.sent;\n\n              // Update state with the result.\n              _this.setState({\n                claimAmount: response\n              });\n\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      console.log('this is:', this);\n    }\n  }, {\n    key: \"renderConnectionBox\",\n    value: function renderConnectionBox() {\n      return React.createElement(\"div\", {\n        id: \"step1\",\n        className: \"floatright bluebox\",\n        hidden: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      }, \"Connect with MetaMask to claim your Universal Block Income\"), React.createElement(MetaMaskButton, {\n        onClick: this.connectMM,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Connect with MetaMask\"));\n    }\n  }, {\n    key: \"renderClaimBox\",\n    value: function renderClaimBox() {\n      console.log(this.state.claimed);\n      console.log(this.state.claimAmount);\n      console.log(this.state.claimTime);\n      return React.createElement(\"div\", {\n        id: \"step2\",\n        className: \"floatright bluebox\",\n        hidden: false,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Your share\"), React.createElement(\"img\", {\n        className: \"phone\",\n        src: smartphone,\n        alt: \"phone\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, \"Today's interest of \", this.state.interest, \" ETH, divided by \", this.state.beneficiaries, \" beneficiaries:  \"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"You can claim approx. \", this.state.claimAmount, \" ETH\"), React.createElement(Button, {\n        onClick: this.increaseClaimCount,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Claim it\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, this.state.claimed ? \"Claimed on\" : \" \"));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      // if (!this.state.web3) {\n      //   return <div>Loading Web3, accounts, and contract...</div>;\n      // }\n      return React.createElement(\"div\", {\n        className: \"App\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, \"#UniversalBlockIncome\"), React.createElement(\"div\", {\n        className: \"floatleft\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        className: \"tcenter\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"Current foundation assets: \", React.createElement(\"span\", {\n        className: \"cyan capital\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, this.state.storageValue, \" ETH\")), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"You need money? Claim it. Every 24h.\"), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"You want to help? Donate. Temporary or permanently.\")), window.ethereum.selectedAddress ? this.renderClaimBox() : this.renderConnectionBox())) //end App\n      ;\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/toby/Desktop/H_FinalProject/client/src/App.js"],"names":["React","Component","SimpleStorageContract","getWeb3","Web3","MetaMaskButton","Button","App","state","storageValue","balance","web3","accounts","beneficiaries","contract","interest","claimed","claimTime","claimCount","claimAmount","loading","componentDidMount","eth","getBalance","num","utils","fromWei","setState","getAccounts","net","getId","networkId","deployedNetwork","networks","instance","Contract","abi","address","runExample","alert","console","error","connectMM","window","ethereum","enable","increaseClaimCount","date","Date","timestamp","getTime","methods","set","send","from","get","call","response","log","smartphone","selectedAddress","renderClaimBox","renderConnectionBox"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SimpleStorageContract from \"./contracts/SimpleStorage.json\";\nimport getWeb3 from \"./utils/getWeb3\";\nimport Web3 from \"web3\";\n\nimport { MetaMaskButton } from 'rimble-ui';\nimport { Button } from 'rimble-ui';\n\n\n\nimport smartphone from './img/smartphone.svg';\n\nimport \"./App.css\";\n\nclass App extends Component {\n\n  state = {\n      storageValue: 14,\n      balance: 4,\n      web3: null,\n      accounts: null,\n      beneficiaries: 2483,\n      contract: null,\n      interest: 0,\n      claimed: false,\n      claimTime: \"\",\n      claimCount: 0,\n      claimAmount: 0,\n      loading: true\n\n    };\n\n    handleClick() {\n       console.log('this is:', this);\n     }\n\n\n  componentDidMount = async () => {\n    try {\n      // Get network provider and web3 instance.\n      const web3 = await getWeb3();\n\n      var balance = await web3.eth.getBalance(\"0xde168992b691107b6ef8d0cdc91a55b4017e9c06\"); //Will give value in.\n      var num = web3.utils.fromWei(balance, \"ether\")\n      this.setState({ storageValue: num});\n\n      this.setState(({ interest }) => ({ interest : this.state.storageValue * 0.1499}))\n      this.setState(({ interest }) => ({ claimAmount : this.state.interest / this.state.beneficiaries}))\n\n\n\n      // Use web3 to get the user's accounts (e.g. Metamask account).\n      const accounts = await web3.eth.getAccounts();\n\n      // Get the contract instance.\n      const networkId = await web3.eth.net.getId();\n      const deployedNetwork = SimpleStorageContract.networks[networkId];\n      const instance = new web3.eth.Contract(\n        SimpleStorageContract.abi,\n        deployedNetwork && deployedNetwork.address,\n\n      );\n\n      // Set web3, accounts, and contract to the state, and then proceed with an\n      // example of interacting with the contract's methods.\n        this.setState({ web3, accounts, contract: instance }, this.runExample);\n\n\n\n\n\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`,\n      );\n      console.error(error);\n    }\n  };\n\n\n\n  connectMM = async () =>\n    {\n      window.ethereum.enable();//await needs async\n\n    }\n\n\n\n\n   increaseClaimCount = async () =>\n{\n  this.setState(({ claimCount }) => ({ claimCount : claimCount + 1}))\n  this.setState(({ claimed }) => ({ claimed : true}))\n\n  var date = new Date();\n  var timestamp = date.getTime();\n  this.setState(({ claimTime }) => ({ claimTime : timestamp}))\n}\n\n\nrunExample = async () => {\n  const { accounts, contract } = this.state;\n\n  // Stores a given value, 5 by default.\n  await contract.methods.set(2).send({ from: accounts[0] });\n\n  // Get the value from the contract to prove it worked.\n  const response = await contract.methods.get().call();\n\n  // Update state with the result.\n  this.setState({ claimAmount: response});\n\n\n};\n\n\n  renderConnectionBox(){\n         return(\n           <div id=\"step1\" className=\"floatright bluebox\" hidden={false}>\n           <h2>Connect with MetaMask to claim your Universal Block Income</h2>\n           <MetaMaskButton onClick={this.connectMM} >Connect with MetaMask</MetaMaskButton>\n           </div>\n         )\n       }\n\n  renderClaimBox() {\n      console.log(this.state.claimed)\n      console.log(this.state.claimAmount)\n      console.log(this.state.claimTime)\n       return (\n           <div id=\"step2\" className=\"floatright bluebox\" hidden={false}>\n           <h2>Your share</h2><img className=\"phone\" src={smartphone} alt=\"phone\"></img>\n           <h3>Today's interest of {this.state.interest} ETH, divided by {this.state.beneficiaries} beneficiaries:  </h3>\n           <h3>You can claim approx. {this.state.claimAmount} ETH</h3>\n           <Button  onClick={this.increaseClaimCount}>Claim it</Button>\n           <h3>{this.state.claimed ? \"Claimed on\" : \" \"}</h3>\n           </div>\n         );\n       }\n\n\n\n  render() {\n    // if (!this.state.web3) {\n    //   return <div>Loading Web3, accounts, and contract...</div>;\n    // }\n\n\n\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n\n            <h1>#UniversalBlockIncome</h1>\n\n            <div className=\"floatleft\">\n              <h2 className=\"tcenter\">Current foundation assets: <span className=\"cyan capital\">{this.state.storageValue} ETH</span></h2>\n              <h3>You need money? Claim it. Every 24h.</h3>\n              <h3>You want to help? Donate. Temporary or permanently.</h3>\n            </div>\n\n\n            {window.ethereum.selectedAddress\n            ? this.renderClaimBox()\n            : this.renderConnectionBox()\n            }\n\n\n        </div>\n      </div>\n      //end App\n\n\n\n    );\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}